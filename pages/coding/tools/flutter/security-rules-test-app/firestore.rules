rules_version = '2';

service cloud.firestore {
  match /databases/{database}/documents {
    function requiredFields() {
      return ["authorId", "visibility", "content", "headline"];
    }
    function optionalFields() {
      return ["photo", "tags", "location"];
    }

    function userIsModerator() {
      return request.auth.token.isModerator == true;
    }

    function userIsRoomMod(roomId) {
      return request.auth.uid in 
        (get(/databases/$(database)/documents/rooms/$(roomId)).data.roomMods)
    }

    function postHasAllRequiredFields() {
      return (request.resource.data.keys()
        .hasAll(requiredFields()));
    }

    function postHasOnlyAllowedFields() {
      let requiredAndOptionalFields = requiredFields().concat(optionalFields());
      return (request.resource.data.keys()
        .hasOnly(requiredAndOptionalFields));
    }

    match /{document=**} {
      allow read, write: if false;
    }
    match /readonly/{docID} {
      allow read: if true;
      allow write: if false;
    }
    match /users/{userId} {
      allow write: if (request.auth.uid == userId);
    }
    match /posts/{postId} {
      allow read: if (resource.data.visibility == "public") 
        || (resource.data.authorId == request.auth.uid);
      allow update: if (resource.data.authorId == request.auth.uid) 
        || userIsModerator();
      allow create: if (request.resource.data.authorId == request.auth.uid) 
        && postHasAllRequiredFields() && postHasOnlyAllowedFields();
    }
    match /rooms/{roomId} {
      // Security rules for rooms go here
      match /posts/{postId} {
        allow update: if (resource.data.authorId == request.auth.uid) ||
          userIsRoomMod(roomId);
      }
    }
  }
}